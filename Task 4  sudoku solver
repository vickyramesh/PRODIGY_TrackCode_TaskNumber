def print_board(board):
    """Print the Sudoku board in a readable format."""
    for row in board:
        print(" ".join(str(cell) if cell != 0 else '.' for cell in row))

def is_valid(board, row, col, num):
    """
    Check if it's safe to place the number `num` at position (row, col).
    This checks the row, column, and 3x3 subgrid for conflicts.
    """
    # Check if `num` is not in the current row
    if num in board[row]:
        return False
    
    # Check if `num` is not in the current column
    for r in range(9):
        if board[r][col] == num:
            return False
    
    # Check if `num` is not in the 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    
    return True

def solve_sudoku(board):
    """
    Solves the Sudoku puzzle using backtracking. 
    Returns True if the puzzle is solved, otherwise False.
    """
    # Find an empty cell (represented by 0)
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                # Try numbers 1-9
                for num in range(1, 10):
                    if is_valid(board, row, col, num):
                        board[row][col] = num  # Place the number
                        
                        # Recursively try to solve the rest of the board
                        if solve_sudoku(board):
                            return True
                        
                        # If placing `num` didn't work, reset and try next number
                        board[row][col] = 0
                
                # If no number is valid, return False to backtrack
                return False
    
    # If there are no empty cells left, the puzzle is solved
    return True

# Example Sudoku puzzle (0 represents empty cells)
# You can replace this with any 9x9 Sudoku grid.
sudoku_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Print the original Sudoku puzzle
print("Original Sudoku puzzle:")
print_board(sudoku_board)

# Solve the Sudoku puzzle
if solve_sudoku(sudoku_board):
    print("\nSolved Sudoku puzzle:")
    print_board(sudoku_board)
else:
    print("No solution exists.")
